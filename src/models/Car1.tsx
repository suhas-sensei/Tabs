/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Artso12 (https://sketchfab.com/Artso12)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/1962-pontiac-catalina-064a26e5580e481a8182b55f0a1ca167
Title: 1962 Pontiac Catalina
*/

import * as THREE from 'three'
import { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { type GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    acmat0: THREE.Mesh
    acmat1: THREE.Mesh
    acmat1_1: THREE.Mesh
    acmat1_2: THREE.Mesh
    acmat1_3: THREE.Mesh
    acmat1_4: THREE.Mesh
    acmat1_5: THREE.Mesh
    acmat1_6: THREE.Mesh
    acmat1_7: THREE.Mesh
    acmat1_8: THREE.Mesh
    acmat1_9: THREE.Mesh
    acmat1_10: THREE.Mesh
    acmat1_11: THREE.Mesh
    acmat1_12: THREE.Mesh
    acmat1_13: THREE.Mesh
    acmat1_14: THREE.Mesh
    acmat1_15: THREE.Mesh
    acmat1_16: THREE.Mesh
    acmat1_17: THREE.Mesh
    acmat1_18: THREE.Mesh
    acmat1_19: THREE.Mesh
    acmat1_20: THREE.Mesh
    acmat1_21: THREE.Mesh
  }
  materials: {
    acmat0: THREE.MeshStandardMaterial
    acmat1: THREE.MeshPhysicalMaterial
  }
}

export function Model(props: any) {
  const { nodes, materials } = useGLTF('/car1.glb') as unknown as GLTFResult
  const groupRef = useRef<THREE.Group>(null)

  return (
    <group
      {...props}
      ref={groupRef}
      dispose={null}
      onPointerEnter={() => {
        document.body.style.cursor = 'grab'
      }}
      onPointerLeave={() => {
        document.body.style.cursor = 'default'
      }}
      onPointerDown={() => {
        document.body.style.cursor = 'grabbing'
      }}
      onPointerUp={() => {
        document.body.style.cursor = 'grab'
      }}
    >
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat0.geometry}
            material={materials.acmat0}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_1.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_2.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_3.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_4.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_5.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_6.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_7.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_8.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_9.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_10.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_11.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_12.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_13.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_14.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_15.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_16.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_17.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_18.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_19.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_20.geometry}
            material={materials.acmat1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.acmat1_21.geometry}
            material={materials.acmat1}
          />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/car1.glb')
